Here's a **step-by-step guide** to create a basic **Movie App** in **Android Studio using Java**. This app will fetch and display a list of movies from an online API (like The Movie Database - TMDB).

---

## üé¨ **Movie App Overview**

* **Language**: Java
* **IDE**: Android Studio
* **API**: The Movie Database (TMDb) API ([https://developer.themoviedb.org/](https://developer.themoviedb.org/))
* **Features**: Fetch popular movies and display posters with titles in a RecyclerView

---

## ‚úÖ **Step-by-Step Guide**

### üîπ Step 1: Setup Android Studio Project

1. Open Android Studio ‚Üí **New Project**
2. Choose **Empty Activity**
3. Name: `MovieApp`
4. Language: `Java`
5. Finish

---

### üîπ Step 2: Add Dependencies

Open `build.gradle (Module: app)` and add:

```gradle
dependencies {
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
}
```

Click **Sync Now**.

---

### üîπ Step 3: Request Internet Permission

In `AndroidManifest.xml`, add:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

---

### üîπ Step 4: Get TMDB API Key

1. Go to [TMDb Developers](https://developer.themoviedb.org/)
2. Create an account and generate an API key
3. Save the key for use in Retrofit

---

### üîπ Step 5: Create Data Model Classes

**Movie.java**

```java
public class Movie {
    private String title;
    private String poster_path;

    public String getTitle() {
        return title;
    }

    public String getPosterPath() {
        return poster_path;
    }
}
```

**MovieResponse.java**

```java
import java.util.List;

public class MovieResponse {
    private List<Movie> results;

    public List<Movie> getResults() {
        return results;
    }
}
```

---

### üîπ Step 6: Setup Retrofit

**ApiInterface.java**

```java
import retrofit2.Call;
import retrofit2.http.GET;
import retrofit2.http.Query;

public interface ApiInterface {
    @GET("movie/popular")
    Call<MovieResponse> getPopularMovies(
        @Query("api_key") String apiKey
    );
}
```

**ApiClient.java**

```java
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public class ApiClient {
    private static final String BASE_URL = "https://api.themoviedb.org/3/";
    private static Retrofit retrofit = null;

    public static Retrofit getClient() {
        if (retrofit == null) {
            retrofit = new Retrofit.Builder()
                .baseUrl(BASE_URL)
                .addConverterFactory(GsonConverterFactory.create())
                .build();
        }
        return retrofit;
    }
}
```

---

### üîπ Step 7: Create RecyclerView Adapter

**MovieAdapter.java**

```java
import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.recyclerview.widget.RecyclerView;
import com.bumptech.glide.Glide;
import java.util.List;

public class MovieAdapter extends RecyclerView.Adapter<MovieAdapter.MovieViewHolder> {

    private Context context;
    private List<Movie> movieList;

    public MovieAdapter(Context context, List<Movie> movieList) {
        this.context = context;
        this.movieList = movieList;
    }

    @Override
    public MovieViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(context).inflate(R.layout.item_movie, parent, false);
        return new MovieViewHolder(view);
    }

    @Override
    public void onBindViewHolder(MovieViewHolder holder, int position) {
        Movie movie = movieList.get(position);
        holder.title.setText(movie.getTitle());
        Glide.with(context)
            .load("https://image.tmdb.org/t/p/w500" + movie.getPosterPath())
            .into(holder.poster);
    }

    @Override
    public int getItemCount() {
        return movieList.size();
    }

    public class MovieViewHolder extends RecyclerView.ViewHolder {
        TextView title;
        ImageView poster;

        public MovieViewHolder(View itemView) {
            super(itemView);
            title = itemView.findViewById(R.id.textViewTitle);
            poster = itemView.findViewById(R.id.imageViewPoster);
        }
    }
}
```

---

### üîπ Step 8: Create Layouts

#### **item\_movie.xml** (inside `res/layout/`)

```xml
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:orientation="vertical"
    android:padding="8dp">

    <ImageView
        android:id="@+id/imageViewPoster"
        android:layout_width="match_parent"
        android:layout_height="250dp"
        android:scaleType="centerCrop" />

    <TextView
        android:id="@+id/textViewTitle"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textStyle="bold"
        android:textSize="16sp"
        android:paddingTop="4dp"
        android:paddingBottom="4dp" />
</LinearLayout>
```

#### **activity\_main.xml**

```xml
<androidx.recyclerview.widget.RecyclerView
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/recyclerView"
    android:layout_width="match_parent"
    android:layout_height="match_parent"/>
```

---

### üîπ Step 9: Connect Everything in MainActivity

**MainActivity.java**

```java
import android.os.Bundle;
import android.util.Log;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import java.util.List;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class MainActivity extends AppCompatActivity {

    private RecyclerView recyclerView;
    private MovieAdapter movieAdapter;
    private static final String API_KEY = "YOUR_API_KEY_HERE";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        
        recyclerView = findViewById(R.id.recyclerView);
        recyclerView.setLayoutManager(new LinearLayoutManager(this));

        ApiInterface apiService = ApiClient.getClient().create(ApiInterface.class);
        Call<MovieResponse> call = apiService.getPopularMovies(API_KEY);

        call.enqueue(new Callback<MovieResponse>() {
            @Override
            public void onResponse(Call<MovieResponse> call, Response<MovieResponse> response) {
                List<Movie> movies = response.body().getResults();
                movieAdapter = new MovieAdapter(MainActivity.this, movies);
                recyclerView.setAdapter(movieAdapter);
            }

            @Override
            public void onFailure(Call<MovieResponse> call, Throwable t) {
                Log.e("MainActivity", "Error: " + t.getMessage());
            }
        });
    }
}
```

---

## ‚úÖ App Ready!

Build and run the app. You should see a list of movie posters and titles.

---

## üõ†Ô∏è Optional Enhancements

* Add search functionality
* Load more with pagination
* Display movie details in a new activity
* Use MVVM architecture with Room for caching

Would you like a GitHub-ready version or ZIP file structure for this project?
