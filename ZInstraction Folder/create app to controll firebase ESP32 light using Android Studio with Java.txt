To create an Android app using **Android Studio with Java** that controls an **ESP32 light** through **Firebase**, you need to complete the project in two main parts:

---

### ðŸ”§ PART 1: Set Up Firebase and ESP32

#### 1. **Configure Firebase**

1. Go to [Firebase Console](https://console.firebase.google.com/)

2. Create a new project.

3. Add a **Realtime Database** (not Firestore):

   * Choose "Start in test mode"
   * Set an initial value like:

     ```json
     {
       "lightStatus": "OFF"
     }
     ```

4. Go to **Project Settings > General**, then:

   * Add an Android app with your appâ€™s package name.
   * Download the `google-services.json` file.

---

#### 2. **ESP32 Code (Arduino)**

Youâ€™ll need:

* `FirebaseESP32.h` library
* Your Firebase projectâ€™s credentials

Example Code (Arduino IDE):

```cpp
#include <WiFi.h>
#include <FirebaseESP32.h>

#define WIFI_SSID "your-SSID"
#define WIFI_PASSWORD "your-PASSWORD"

#define FIREBASE_HOST "your-project-id.firebaseio.com"
#define FIREBASE_AUTH "your-database-secret"

FirebaseData firebaseData;

int lightPin = 2; // onboard LED (change as needed)

void setup() {
  Serial.begin(115200);
  pinMode(lightPin, OUTPUT);

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);
  Firebase.reconnectWiFi(true);
}

void loop() {
  if (Firebase.getString(firebaseData, "/lightStatus")) {
    String status = firebaseData.stringData();
    if (status == "ON") {
      digitalWrite(lightPin, HIGH);
    } else {
      digitalWrite(lightPin, LOW);
    }
  }
  delay(1000); // poll every second
}
```

---

### ðŸ“± PART 2: Android Studio Java App

#### 1. **Set Up Android Studio Project**

* Create a new project with **Empty Activity**.
* Choose **Java** as the language.

#### 2. **Add Firebase to Android**

* Add the `google-services.json` to `app/`.
* Add to `build.gradle (Project)`:

```gradle
classpath 'com.google.gms:google-services:4.3.15'
```

* Add to `build.gradle (Module: app)`:

```gradle
implementation 'com.google.firebase:firebase-database:20.2.1'
apply plugin: 'com.google.gms.google-services'
```

Sync Gradle.

---

#### 3. **Android Layout (`activity_main.xml`)**

```xml
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <Button
        android:id="@+id/btnOn"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Turn ON"
        android:layout_centerHorizontal="true"
        android:layout_marginTop="100dp" />

    <Button
        android:id="@+id/btnOff"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Turn OFF"
        android:layout_below="@id/btnOn"
        android:layout_centerHorizontal="true"
        android:layout_marginTop="20dp" />
</RelativeLayout>
```

---

#### 4. **Java Code (`MainActivity.java`)**

```java
package com.example.firebaseesp32control;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import androidx.appcompat.app.AppCompatActivity;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;

public class MainActivity extends AppCompatActivity {

    private DatabaseReference databaseRef;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        
        databaseRef = FirebaseDatabase.getInstance().getReference("lightStatus");

        Button btnOn = findViewById(R.id.btnOn);
        Button btnOff = findViewById(R.id.btnOff);

        btnOn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                databaseRef.setValue("ON");
            }
        });

        btnOff.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                databaseRef.setValue("OFF");
            }
        });
    }
}
```

---

### âœ… Testing

1. Connect ESP32 to Wi-Fi.
2. Open your app.
3. Tap **ON** or **OFF**.
4. ESP32 will turn the LED on/off based on Firebase value.

---

Would you like:

* A downloadable zip of the Android project?
* A full video tutorial recommendation?
* Help deploying the app to the Play Store?

Let me know and I can continue!
